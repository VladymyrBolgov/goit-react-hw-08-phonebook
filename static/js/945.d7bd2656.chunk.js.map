{"version":3,"file":"static/js/945.d7bd2656.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/selectors.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  width: 600px;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 50px;\n`;\n\nexport const FormLabel = styled.label`\n  width: 60px;\n  margin-right: 10px;\n`;\n\nexport const FormInput = styled.input`\n  width: 200px;\n  height: 20px;\n\n  &:not(:last-child) {\n    margin-right: 20px;\n  }\n`;\n\nexport const FormButton = styled.button`\n  display: block;\n  margin-top: 30px;\n  width: 130px;\n  height: 40px;\n  font-size: 12px;\n  text-transform: uppercase;\n  border-radius: 5px;\n  background-color: tomato;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08), 0px 4px 4px rgba(0, 0, 0, 0.03),\n    1px 4px 6px rgba(0, 0, 0, 0.08);\n  transition: scale 250ms linear, background-color 250ms linear,\n    color 250ms linear;\n\n  :hover,\n  :focus {\n    background-color: red;\n    color: #e1e4e9;\n    scale: 1.1;\n  }\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectLoadingStatus = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilterValue = state => state.filter;\n\nexport const selectContactsByName = state => {\n    const contacts = selectContacts(state);\n    const filter = selectFilterValue(state);\n    if (!filter) {\n        return [...contacts].sort((firstContact, secondContact) =>\n            firstContact.name.localeCompare(secondContact.name)\n        );\n    }\n    return [...contacts]\n        .sort((firstContact, secondContact) =>\n            firstContact.name.localeCompare(secondContact.name)\n        )\n        .filter(contact =>\n            contact.name.toUpperCase().includes(filter.toUpperCase())\n        );\n};","import React from 'react';\nimport { Formik, Field } from 'formik';\nimport {FormBox, FormLabel, FormInput, FormButton,} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nconst ContactForm = () => {\n  const initualValues = {\n    name: '',\n    phone: '',\n  };\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  \n  const handleOnSubmit = (values, { resetForm }) => {\n    contacts.find(\n      contact => values.name.toLowerCase() === contact.name.toLowerCase()\n    )\n    ? alert(`${values.name} is already in contacts.`)\n    : dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <>\n    <h2>Add contact:</h2>\n    <Formik initialValues={initualValues} onSubmit={handleOnSubmit}>\n      <FormBox>\n        <FormLabel >Name</FormLabel>\n        <Field\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          as={FormInput}\n          required\n        />\n        <FormLabel >Number</FormLabel>\n        <Field\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          as={FormInput}\n          required\n        />\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </FormBox>\n      </Formik>\n      </>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const FilterTitle = styled.h3`\n  margin-bottom: 10px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 200px;\n  height: 20px;\n`;","import { FilterTitle, FilterInput } from './Filter.styled';\nimport { setFilterValue } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue,  selectContacts } from 'redux/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n  const contacts = useSelector(selectContacts);\n\n  const filterInputHandler = e => {\n    const inputValue = e.target.value;\n\n    const serchContact = contacts.filter(({ name }) =>\n      name.toUpperCase().includes(inputValue.toUpperCase())\n    );\n    console.log(serchContact);\n    if (serchContact.length === 0) {\n      alert.failure('Нет такого контакта');\n    }\n\n    dispatch(setFilterValue(inputValue));\n  };\n  \n  \n  return (\n    <div>\n      <FilterTitle>Find contacts by name</FilterTitle>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={filterInputHandler}\n        title=\"Search field\"\n        required\n      />\n    </div>\n  );\n};\n\nexport default Filter;","import styled from '@emotion/styled';\n\nexport const ContactListBox = styled.ul`\n  margin-top: 20px;\n  gap: 20px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-basis: calc((100% - 60px) / 4);\n`;\n\nexport const ContactListText = styled.p`\n  margin-bottom: 15px;\n`;\n\nexport const ContactListBtn = styled.button`\n  display: block;\n  width: 100px;\n  height: 30px;\n  font-size: 12px;\n  text-transform: uppercase;\n  border-radius: 5px;\n  background-color: tomato;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08), 0px 4px 4px rgba(0, 0, 0, 0.03),\n    1px 4px 6px rgba(0, 0, 0, 0.08);\n  transition: scale 250ms linear, background-color 250ms linear,\n    color 250ms linear;\n\n  :hover,\n  :focus {\n    background-color: red;\n    color: #e1e4e9;\n    scale: 1.1;\n  }\n`;\n","import {\n  ContactListBox,\n  ContactListItem,\n  ContactListBtn,\n  ContactListText,\n} from './ContactList.styled';\nimport { selectContactsByName, selectLoadingStatus } from 'redux/selectors';\nimport { deleteContact, fetchContacts } from 'redux/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Loader from 'components/Loader'\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsByName);\n  const isLoading = useSelector(selectLoadingStatus);\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch]);\n \n  return (\n    <>\n    <h2>Contacts</h2>\n    <ContactListBox>\n      {isLoading && <Loader />}\n      {contacts.map(({ id, name, number  }) => (\n        <ContactListItem key={id}>\n          <ContactListText> {name}</ContactListText>\n          <ContactListText>{ number }</ContactListText>\n          <ContactListBtn\n            variant=\"contained\"\n            onClick={() => {\n              dispatch(deleteContact(id));\n            }}\n          >\n            Remuve\n          </ContactListBtn>\n        </ContactListItem>\n      ))}\n      </ContactListBox>\n      </>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  \n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormBox","styled","Form","FormLabel","FormInput","FormButton","selectContacts","state","contacts","items","selectLoadingStatus","isLoading","selectFilterValue","filter","selectContactsByName","sort","firstContact","secondContact","name","localeCompare","contact","toUpperCase","includes","useSelector","dispatch","useDispatch","initialValues","phone","onSubmit","values","resetForm","find","toLowerCase","alert","addContact","type","pattern","title","as","required","FilterTitle","FilterInput","value","onChange","e","inputValue","target","serchContact","console","log","length","failure","setFilterValue","ContactListBox","ContactListItem","ContactListText","ContactListBtn","useEffect","fetchContacts","Loader","map","id","number","variant","onClick","deleteContact"],"sourceRoot":""}